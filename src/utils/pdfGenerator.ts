import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { TaxCalculationResult } from '../types';

export const generateTaxReport = (formData: any, result: TaxCalculationResult) => {
  const doc = new jsPDF({
    font: "helvetica"  // Set default font
  });
  
  // Set font settings globally
  doc.setFont("helvetica", "normal");
  doc.setFontSize(12);
  
  // Format number function
  const formatNumber = (num: number) => {
    const roundedNum = Math.round(num).toString();
    const lastThree = roundedNum.substring(roundedNum.length - 3);
    const otherNumbers = roundedNum.substring(0, roundedNum.length - 3);
    const finalFormat = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",");
    return `Rs. ${otherNumbers ? finalFormat + ',' + lastThree : lastThree}`;
  };

  // Professional Header with styling
  doc.setFillColor(41, 128, 185);
  doc.rect(0, 0, doc.internal.pageSize.width, 40, 'F');
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(24);
  doc.text('Tax Calculation Report', doc.internal.pageSize.width/2, 25, { align: 'center' });

  // Basic Info Section
  doc.setTextColor(0, 0, 0);
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  
  const basicInfo = [
    [`Financial Year: ${formData.financialYear}`, `Date: ${new Date().toLocaleDateString()}`],
    [`Category: ${formData.businessType ? 'Business' : 'Salaried'}`, 
     `${!formData.businessType ? `Tax Regime: ${formData.regime.toUpperCase()}` : ''}`]
  ];

  // Income Summary Table
  autoTable(doc, {
    startY: 50,
    body: basicInfo,
    theme: 'plain',
    styles: { fontSize: 12, cellPadding: 5 },
    columnStyles: { 0: { cellWidth: 100 }, 1: { cellWidth: 90 } }
  });

  // Tax Summary Table
  autoTable(doc, {
    startY: 80,
    head: [[{ content: 'Income & Tax Summary', colSpan: 2, styles: { halign: 'center', fillColor: [41, 128, 185] } }]],
    body: [
      ['Gross Income', formatNumber(formData.income)],
      ['Total Deductions', formatNumber(formData.income - result.taxableIncome)],
      ['Taxable Income', formatNumber(result.taxableIncome)],
      ['Total Tax', formatNumber(result.totalTax)],
      ['Effective Tax Rate', `${result.effectiveRate.toFixed(2)}%`]
    ],
    theme: 'striped',
    headStyles: { fillColor: [41, 128, 185], textColor: 255 },
    columnStyles: {
      0: { fontStyle: 'bold' },
      1: { halign: 'right', font: 'helvetica' }  // Explicitly set font for numbers
    },
    styles: { 
      fontSize: 12,
      cellPadding: 8,
      font: 'helvetica',  // Set font for all cells
      fontStyle: 'normal'
    }
  });

  // Deductions Table
  const deductionsY = (doc as any).lastAutoTable.finalY + 15;
  
  if (Object.keys(formData.deductions).length > 0) {
    autoTable(doc, {
      startY: deductionsY,
      head: [[{ content: 'Deductions Breakdown', colSpan: 3, styles: { halign: 'center', fillColor: [46, 204, 113] } }]],
      body: Object.entries(formData.deductions)
        .filter(([_, amount]) => amount > 0)
        .map(([key, amount]) => {
          const descriptions: Record<string, string> = {
            section80C: 'PPF, ELSS, Insurance, etc.',
            hra: 'House Rent Allowance',
            section80D: 'Health Insurance Premium',
            lta: 'Leave Travel Allowance',
            nps: 'National Pension System',
            homeLoan: 'Home Loan Interest'
          };
          return [
            key,
            formatNumber(Number(amount)),
            descriptions[key] || key
          ];
        }),
      theme: 'striped',
      headStyles: { fillColor: [46, 204, 113], textColor: 255 },
      columnStyles: {
        0: { cellWidth: 60 },
        1: { cellWidth: 50, halign: 'right' },
        2: { cellWidth: 80 }
      },
      styles: { fontSize: 11, cellPadding: 6 }
    });
  }

  // Tax Savings Table
  const savingsY = (doc as any).lastAutoTable.finalY + 15;
  const totalSaved = (formData.income - result.taxableIncome) * 
    (formData.regime === 'new' ? 0.25 : 0.30);

  autoTable(doc, {
    startY: savingsY,
    head: [[{ content: 'Tax Savings Summary', colSpan: 2, styles: { halign: 'center', fillColor: [46, 204, 113] } }]],
    body: [['Total Tax Saved', formatNumber(totalSaved)]],
    theme: 'grid',
    headStyles: { fillColor: [46, 204, 113], textColor: 255 },
    columnStyles: {
      0: { fontStyle: 'bold' },
      1: { halign: 'right' }
    },
    styles: { fontSize: 12, cellPadding: 8 }
  });

  // Footer
  const pageCount = doc.internal.getNumberOfPages();
  doc.setFontSize(10);
  doc.setTextColor(128, 128, 128);
  
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.text(
      `Generated by Tax Calculator | Page ${i} of ${pageCount}`,
      doc.internal.pageSize.width/2,
      doc.internal.pageSize.height - 10,
      { align: 'center' }
    );
  }

  return doc;
};